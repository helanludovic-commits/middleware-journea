import { NextRequest, NextResponse } from 'next/server';
import { syncGHLContacts, syncGHLOpportunities } from '@/lib/ghl-api';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ D√©but de la synchronisation GHL');

    // V√©rification de l'API key GHL
    if (!process.env.GHL_API_KEY) {
      console.error('‚ùå API Key GHL manquante');
      return NextResponse.json(
        { error: 'Configuration GHL manquante' },
        { status: 500 }
      );
    }

    const results = {
      contacts: { synced: 0, errors: 0 },
      opportunities: { synced: 0, errors: 0 },
      startTime: new Date().toISOString(),
      endTime: '',
      success: false
    };

    try {
      // 1. Synchroniser les contacts GHL ‚Üí clients
      console.log('üìû Synchronisation des contacts GHL...');
      const contactsResult = await syncGHLContacts();
      results.contacts = contactsResult;
      console.log(`‚úÖ Contacts synchronis√©s: ${contactsResult.synced}, erreurs: ${contactsResult.errors}`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation des contacts:', error);
      results.contacts.errors++;
    }

    try {
      // 2. Synchroniser les opportunit√©s GHL ‚Üí itin√©raires
      console.log('üéØ Synchronisation des opportunit√©s GHL...');
      const opportunitiesResult = await syncGHLOpportunities();
      results.opportunities = opportunitiesResult;
      console.log(`‚úÖ Opportunit√©s synchronis√©es: ${opportunitiesResult.synced}, erreurs: ${opportunitiesResult.errors}`);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la synchronisation des opportunit√©s:', error);
      results.opportunities.errors++;
    }

    results.endTime = new Date().toISOString();
    results.success = true;

    const totalSynced = results.contacts.synced + results.opportunities.synced;
    const totalErrors = results.contacts.errors + results.opportunities.errors;

    console.log(`üéâ Synchronisation termin√©e: ${totalSynced} √©l√©ments synchronis√©s, ${totalErrors} erreurs`);

    return NextResponse.json({
      success: true,
      message: `Synchronisation r√©ussie: ${totalSynced} √©l√©ments synchronis√©s`,
      results
    });

  } catch (error) {
    console.error('üí• Erreur g√©n√©rale lors de la synchronisation GHL:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la synchronisation GHL',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  // Endpoint pour v√©rifier le statut de l'API GHL
  try {
    const isConfigured = !!process.env.GHL_API_KEY && !!process.env.GHL_LOCATION_ID;
    
    return NextResponse.json({
      configured: isConfigured,
      lastSync: null, // Vous pouvez stocker cette info en base si n√©cessaire
      status: isConfigured ? 'ready' : 'not_configured'
    });
    
  } catch (error) {
    return NextResponse.json(
      { error: 'Erreur lors de la v√©rification du statut GHL' },
      { status: 500 }
    );
  }
}